// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OffshoreTrack.Data;

#nullable disable

namespace OffshoreTrack.Migrations
{
    [DbContext(typeof(Contexto))]
    partial class ContextoModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.7");

            modelBuilder.Entity("OffshoreTrack.Models.AtividadeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Acao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int?>("id_material")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_usuario")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("id_material");

                    b.HasIndex("id_usuario");

                    b.ToTable("atividadeLog", (string)null);
                });

            modelBuilder.Entity("OffshoreTrack.Models.AtividadeLogPS", b =>
                {
                    b.Property<int>("id_atividadeLogPs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("acao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("id_parteSolta")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_usuario")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("usuarioid_usuario")
                        .HasColumnType("INTEGER");

                    b.HasKey("id_atividadeLogPs");

                    b.HasIndex("id_parteSolta");

                    b.HasIndex("usuarioid_usuario");

                    b.ToTable("atividadeLogPS", (string)null);
                });

            modelBuilder.Entity("OffshoreTrack.Models.Certificacao", b =>
                {
                    b.Property<int>("id_certificacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Deletado")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Materialid_material")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("anexo")
                        .HasColumnType("BLOB");

                    b.Property<string>("certificacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("dataEmissao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("dataValidade")
                        .HasColumnType("TEXT");

                    b.Property<string>("orgaoEmissor")
                        .HasColumnType("TEXT");

                    b.HasKey("id_certificacao");

                    b.HasIndex("Materialid_material");

                    b.ToTable("Certificacao");
                });

            modelBuilder.Entity("OffshoreTrack.Models.Cliente", b =>
                {
                    b.Property<int>("id_cliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Deletado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("cliente")
                        .HasColumnType("TEXT");

                    b.Property<string>("cnpj")
                        .HasColumnType("TEXT");

                    b.Property<string>("endereco")
                        .HasColumnType("TEXT");

                    b.Property<string>("razaoSocial")
                        .HasColumnType("TEXT");

                    b.Property<string>("telefone")
                        .HasColumnType("TEXT");

                    b.HasKey("id_cliente");

                    b.ToTable("cliente", (string)null);
                });

            modelBuilder.Entity("OffshoreTrack.Models.Contrato", b =>
                {
                    b.Property<int>("id_contrato")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Deletado")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("anexo")
                        .HasColumnType("BLOB");

                    b.Property<string>("contrato")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("dataFim")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("dataInicio")
                        .HasColumnType("TEXT");

                    b.Property<int?>("id_cliente")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_fornecedor")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_setor")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_status")
                        .HasColumnType("INTEGER");

                    b.HasKey("id_contrato");

                    b.HasIndex("id_cliente");

                    b.HasIndex("id_fornecedor");

                    b.HasIndex("id_setor");

                    b.HasIndex("id_status");

                    b.ToTable("Contrato");
                });

            modelBuilder.Entity("OffshoreTrack.Models.Criticidade", b =>
                {
                    b.Property<int>("id_criticidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Deletado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("criticidade")
                        .HasColumnType("TEXT");

                    b.HasKey("id_criticidade");

                    b.ToTable("criticidade", (string)null);
                });

            modelBuilder.Entity("OffshoreTrack.Models.Empresa", b =>
                {
                    b.Property<int>("id_empresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Deletado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("cnpjEmpresa")
                        .HasColumnType("TEXT");

                    b.Property<string>("emailEmpresa")
                        .HasColumnType("TEXT");

                    b.Property<string>("empresa")
                        .HasColumnType("TEXT");

                    b.Property<string>("enderecoEmpresa")
                        .HasColumnType("TEXT");

                    b.Property<string>("inscricaoEstadualEmpresa")
                        .HasColumnType("TEXT");

                    b.Property<string>("inscricaoMunicipalEmpresa")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("logoEmpresa")
                        .HasColumnType("BLOB");

                    b.Property<string>("razaoSocialEmpresa")
                        .HasColumnType("TEXT");

                    b.Property<string>("responsavelEmpresa")
                        .HasColumnType("TEXT");

                    b.Property<string>("telefoneEmpresa")
                        .HasColumnType("TEXT");

                    b.HasKey("id_empresa");

                    b.ToTable("Empresa");
                });

            modelBuilder.Entity("OffshoreTrack.Models.FormaPagamento", b =>
                {
                    b.Property<int>("id_formaPagamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Deletado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("formaPagamento")
                        .HasColumnType("TEXT");

                    b.HasKey("id_formaPagamento");

                    b.ToTable("FormaPagamento");
                });

            modelBuilder.Entity("OffshoreTrack.Models.Fornecedor", b =>
                {
                    b.Property<int>("id_fornecedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Deletado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("cnpj")
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .HasColumnType("TEXT");

                    b.Property<string>("endereco")
                        .HasColumnType("TEXT");

                    b.Property<string>("fornecedor")
                        .HasColumnType("TEXT");

                    b.Property<string>("inscricaoEstadual")
                        .HasColumnType("TEXT");

                    b.Property<string>("inscricaoMunicipal")
                        .HasColumnType("TEXT");

                    b.Property<string>("razaoSocial")
                        .HasColumnType("TEXT");

                    b.Property<string>("telefone")
                        .HasColumnType("TEXT");

                    b.Property<string>("vendedor")
                        .HasColumnType("TEXT");

                    b.HasKey("id_fornecedor");

                    b.ToTable("fornecedor", (string)null);
                });

            modelBuilder.Entity("OffshoreTrack.Models.Local", b =>
                {
                    b.Property<int>("id_local")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Deletado")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_cliente")
                        .HasColumnType("INTEGER");

                    b.Property<string>("local")
                        .HasColumnType("TEXT");

                    b.HasKey("id_local");

                    b.HasIndex("id_cliente");

                    b.ToTable("local", (string)null);
                });

            modelBuilder.Entity("OffshoreTrack.Models.Manutencao", b =>
                {
                    b.Property<int>("id_manutencao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Deletado")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("anexo")
                        .HasColumnType("BLOB");

                    b.Property<DateTime?>("data")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("data_conclusao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("data_prevista")
                        .HasColumnType("TEXT");

                    b.Property<string>("descricao")
                        .HasColumnType("TEXT");

                    b.Property<int?>("id_criticidade")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_fornecedor")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_material")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_setor")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_status")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_tipo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("manutencao")
                        .HasColumnType("TEXT");

                    b.HasKey("id_manutencao");

                    b.HasIndex("id_criticidade");

                    b.HasIndex("id_fornecedor");

                    b.HasIndex("id_material");

                    b.HasIndex("id_setor");

                    b.HasIndex("id_status");

                    b.HasIndex("id_tipo");

                    b.ToTable("manutencao", (string)null);
                });

            modelBuilder.Entity("OffshoreTrack.Models.Material", b =>
                {
                    b.Property<int>("id_material")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Deletado")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("anexo")
                        .HasColumnType("BLOB");

                    b.Property<DateTime?>("dataFabricacao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("dataValidade")
                        .HasColumnType("TEXT");

                    b.Property<string>("descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("dimensoes")
                        .HasColumnType("TEXT");

                    b.Property<int?>("id_certificacao")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_cliente")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_criticidade")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_fornecedor")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_local")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_manutencao")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_ordemcompra")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_partesolta")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_setor")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_status")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_tipo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_usuario")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("manutencaoid_manutencao")
                        .HasColumnType("INTEGER");

                    b.Property<string>("material")
                        .HasColumnType("TEXT");

                    b.Property<string>("numeroSerie")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ordemCompraid_oc")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("parteSoltaid_partesolta")
                        .HasColumnType("INTEGER");

                    b.Property<string>("peso")
                        .HasColumnType("TEXT");

                    b.Property<string>("qrcode")
                        .HasColumnType("TEXT");

                    b.Property<int?>("statusid_status")
                        .HasColumnType("INTEGER");

                    b.HasKey("id_material");

                    b.HasIndex("id_certificacao");

                    b.HasIndex("id_cliente");

                    b.HasIndex("id_criticidade");

                    b.HasIndex("id_fornecedor");

                    b.HasIndex("id_local");

                    b.HasIndex("id_setor");

                    b.HasIndex("id_tipo");

                    b.HasIndex("id_usuario");

                    b.HasIndex("manutencaoid_manutencao");

                    b.HasIndex("ordemCompraid_oc");

                    b.HasIndex("parteSoltaid_partesolta");

                    b.HasIndex("statusid_status");

                    b.ToTable("material", (string)null);
                });

            modelBuilder.Entity("OffshoreTrack.Models.OrdemCompra", b =>
                {
                    b.Property<int>("id_oc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Deletado")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("anexo")
                        .HasColumnType("BLOB");

                    b.Property<DateTime?>("data_conclusao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("data_oc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("data_prevista")
                        .HasColumnType("TEXT");

                    b.Property<int?>("id_empresa")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_formaPagamento")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_fornecedor")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_fornecedor2")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_fornecedor3")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_rateio")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_setor")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_status")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_usuario")
                        .HasColumnType("INTEGER");

                    b.Property<string>("item1")
                        .HasColumnType("TEXT");

                    b.Property<string>("item2")
                        .HasColumnType("TEXT");

                    b.Property<string>("item3")
                        .HasColumnType("TEXT");

                    b.Property<string>("item4")
                        .HasColumnType("TEXT");

                    b.Property<string>("item5")
                        .HasColumnType("TEXT");

                    b.Property<string>("moeda")
                        .HasColumnType("TEXT");

                    b.Property<string>("observacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("oc")
                        .HasColumnType("TEXT");

                    b.Property<string>("prioridade")
                        .HasColumnType("TEXT");

                    b.Property<int?>("quantidade1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("quantidade2")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("quantidade3")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("quantidade4")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("quantidade5")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("valor1")
                        .HasColumnType("REAL");

                    b.Property<double?>("valor2")
                        .HasColumnType("REAL");

                    b.Property<double?>("valor3")
                        .HasColumnType("REAL");

                    b.Property<double?>("valor4")
                        .HasColumnType("REAL");

                    b.Property<double?>("valor5")
                        .HasColumnType("REAL");

                    b.HasKey("id_oc");

                    b.HasIndex("id_empresa");

                    b.HasIndex("id_formaPagamento");

                    b.HasIndex("id_fornecedor");

                    b.HasIndex("id_fornecedor2");

                    b.HasIndex("id_fornecedor3");

                    b.HasIndex("id_rateio");

                    b.HasIndex("id_setor");

                    b.HasIndex("id_status");

                    b.HasIndex("id_usuario");

                    b.ToTable("ordemCompra", (string)null);
                });

            modelBuilder.Entity("OffshoreTrack.Models.ParteSolta", b =>
                {
                    b.Property<int>("id_partesolta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Deletado")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("anexo")
                        .HasColumnType("BLOB");

                    b.Property<string>("descricao")
                        .HasColumnType("TEXT");

                    b.Property<string>("dimensoes")
                        .HasColumnType("TEXT");

                    b.Property<int?>("fornecedorid_fornecedor")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_certificacao")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_fornecedor")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_local")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_material")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_oc")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_status")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("localid_local")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ocid_oc")
                        .HasColumnType("INTEGER");

                    b.Property<string>("partesolta")
                        .HasColumnType("TEXT");

                    b.Property<string>("peso")
                        .HasColumnType("TEXT");

                    b.Property<int?>("quantidade")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("statusid_status")
                        .HasColumnType("INTEGER");

                    b.HasKey("id_partesolta");

                    b.HasIndex("fornecedorid_fornecedor");

                    b.HasIndex("id_certificacao");

                    b.HasIndex("id_material");

                    b.HasIndex("localid_local");

                    b.HasIndex("ocid_oc");

                    b.HasIndex("statusid_status");

                    b.ToTable("parteSolta", (string)null);
                });

            modelBuilder.Entity("OffshoreTrack.Models.Permissao", b =>
                {
                    b.Property<int>("id_permissao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Deletado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("nome_permissao")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("permissaoCertificado")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("permissaoCliente")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("permissaoContrato")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("permissaoCriticidade")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("permissaoFornecedor")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("permissaoLocal")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("permissaoManutencao")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("permissaoMaterial")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("permissaoOrdemCompra")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("permissaoParteSolta")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("permissaoRateio")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("permissaoSetor")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("permissaoTipo")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("permissao_admin")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("pode_atualizar")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("pode_criar")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("pode_deletar")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("pode_ler")
                        .HasColumnType("INTEGER");

                    b.HasKey("id_permissao");

                    b.ToTable("permissao", (string)null);
                });

            modelBuilder.Entity("OffshoreTrack.Models.Rateio", b =>
                {
                    b.Property<int>("id_rateio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Deletado")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_setor1")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("id_setor2")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("porcentagem1")
                        .HasColumnType("REAL");

                    b.Property<double?>("porcentagem2")
                        .HasColumnType("REAL");

                    b.Property<string>("rateio")
                        .HasColumnType("TEXT");

                    b.HasKey("id_rateio");

                    b.HasIndex("id_setor1");

                    b.HasIndex("id_setor2");

                    b.ToTable("rateio", (string)null);
                });

            modelBuilder.Entity("OffshoreTrack.Models.Setor", b =>
                {
                    b.Property<int>("id_setor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Deletado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("setor")
                        .HasColumnType("TEXT");

                    b.HasKey("id_setor");

                    b.ToTable("setor", (string)null);
                });

            modelBuilder.Entity("OffshoreTrack.Models.Status", b =>
                {
                    b.Property<int>("id_status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Deletado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("status")
                        .HasColumnType("TEXT");

                    b.HasKey("id_status");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("OffshoreTrack.Models.Tipo", b =>
                {
                    b.Property<int>("id_tipo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Deletado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("tipo")
                        .HasColumnType("TEXT");

                    b.HasKey("id_tipo");

                    b.ToTable("tipo", (string)null);
                });

            modelBuilder.Entity("OffshoreTrack.Models.Usuario", b =>
                {
                    b.Property<int>("id_usuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Deletado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("cpf")
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .HasColumnType("TEXT");

                    b.Property<int?>("id_permissao")
                        .HasColumnType("INTEGER");

                    b.Property<string>("nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("senha")
                        .HasColumnType("TEXT");

                    b.Property<string>("usuario")
                        .HasColumnType("TEXT");

                    b.HasKey("id_usuario");

                    b.HasIndex("id_permissao");

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("OffshoreTrack.Models.AtividadeLog", b =>
                {
                    b.HasOne("OffshoreTrack.Models.Material", "material")
                        .WithMany("atividadeLogs")
                        .HasForeignKey("id_material");

                    b.HasOne("OffshoreTrack.Models.Usuario", "usuario")
                        .WithMany("atividadeLogs")
                        .HasForeignKey("id_usuario");

                    b.Navigation("material");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("OffshoreTrack.Models.AtividadeLogPS", b =>
                {
                    b.HasOne("OffshoreTrack.Models.ParteSolta", "parteSolta")
                        .WithMany("atividadeLogsPS")
                        .HasForeignKey("id_parteSolta");

                    b.HasOne("OffshoreTrack.Models.Usuario", "usuario")
                        .WithMany()
                        .HasForeignKey("usuarioid_usuario");

                    b.Navigation("parteSolta");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("OffshoreTrack.Models.Certificacao", b =>
                {
                    b.HasOne("OffshoreTrack.Models.Material", null)
                        .WithMany("certificacaos")
                        .HasForeignKey("Materialid_material");
                });

            modelBuilder.Entity("OffshoreTrack.Models.Contrato", b =>
                {
                    b.HasOne("OffshoreTrack.Models.Cliente", "cliente")
                        .WithMany("contratos")
                        .HasForeignKey("id_cliente");

                    b.HasOne("OffshoreTrack.Models.Fornecedor", "fornecedor")
                        .WithMany("contratos")
                        .HasForeignKey("id_fornecedor");

                    b.HasOne("OffshoreTrack.Models.Setor", "setor")
                        .WithMany("contratos")
                        .HasForeignKey("id_setor");

                    b.HasOne("OffshoreTrack.Models.Status", "status")
                        .WithMany("contratos")
                        .HasForeignKey("id_status");

                    b.Navigation("cliente");

                    b.Navigation("fornecedor");

                    b.Navigation("setor");

                    b.Navigation("status");
                });

            modelBuilder.Entity("OffshoreTrack.Models.Local", b =>
                {
                    b.HasOne("OffshoreTrack.Models.Cliente", "Cliente")
                        .WithMany("locals")
                        .HasForeignKey("id_cliente");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("OffshoreTrack.Models.Manutencao", b =>
                {
                    b.HasOne("OffshoreTrack.Models.Criticidade", "criticidade")
                        .WithMany("manutencaos")
                        .HasForeignKey("id_criticidade");

                    b.HasOne("OffshoreTrack.Models.Fornecedor", "fornecedor")
                        .WithMany("manutencaos")
                        .HasForeignKey("id_fornecedor");

                    b.HasOne("OffshoreTrack.Models.Material", "material")
                        .WithMany("manutencaos")
                        .HasForeignKey("id_material");

                    b.HasOne("OffshoreTrack.Models.Setor", "setor")
                        .WithMany("manutencaos")
                        .HasForeignKey("id_setor");

                    b.HasOne("OffshoreTrack.Models.Status", "status")
                        .WithMany("manutencaos")
                        .HasForeignKey("id_status");

                    b.HasOne("OffshoreTrack.Models.Tipo", "tipo")
                        .WithMany("manutencaos")
                        .HasForeignKey("id_tipo");

                    b.Navigation("criticidade");

                    b.Navigation("fornecedor");

                    b.Navigation("material");

                    b.Navigation("setor");

                    b.Navigation("status");

                    b.Navigation("tipo");
                });

            modelBuilder.Entity("OffshoreTrack.Models.Material", b =>
                {
                    b.HasOne("OffshoreTrack.Models.Certificacao", "certificacao")
                        .WithMany("materials")
                        .HasForeignKey("id_certificacao");

                    b.HasOne("OffshoreTrack.Models.Cliente", "cliente")
                        .WithMany("materials")
                        .HasForeignKey("id_cliente");

                    b.HasOne("OffshoreTrack.Models.Criticidade", "criticidade")
                        .WithMany("materials")
                        .HasForeignKey("id_criticidade");

                    b.HasOne("OffshoreTrack.Models.Fornecedor", "fornecedor")
                        .WithMany("materials")
                        .HasForeignKey("id_fornecedor");

                    b.HasOne("OffshoreTrack.Models.Local", "local")
                        .WithMany("materials")
                        .HasForeignKey("id_local");

                    b.HasOne("OffshoreTrack.Models.Setor", "setor")
                        .WithMany("materials")
                        .HasForeignKey("id_setor");

                    b.HasOne("OffshoreTrack.Models.Tipo", "tipo")
                        .WithMany("materials")
                        .HasForeignKey("id_tipo");

                    b.HasOne("OffshoreTrack.Models.Usuario", "usuario")
                        .WithMany("materials")
                        .HasForeignKey("id_usuario");

                    b.HasOne("OffshoreTrack.Models.Manutencao", "manutencao")
                        .WithMany("materials")
                        .HasForeignKey("manutencaoid_manutencao");

                    b.HasOne("OffshoreTrack.Models.OrdemCompra", "ordemCompra")
                        .WithMany("materials")
                        .HasForeignKey("ordemCompraid_oc");

                    b.HasOne("OffshoreTrack.Models.ParteSolta", "parteSolta")
                        .WithMany("materials")
                        .HasForeignKey("parteSoltaid_partesolta");

                    b.HasOne("OffshoreTrack.Models.Status", "status")
                        .WithMany("materials")
                        .HasForeignKey("statusid_status");

                    b.Navigation("certificacao");

                    b.Navigation("cliente");

                    b.Navigation("criticidade");

                    b.Navigation("fornecedor");

                    b.Navigation("local");

                    b.Navigation("manutencao");

                    b.Navigation("ordemCompra");

                    b.Navigation("parteSolta");

                    b.Navigation("setor");

                    b.Navigation("status");

                    b.Navigation("tipo");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("OffshoreTrack.Models.OrdemCompra", b =>
                {
                    b.HasOne("OffshoreTrack.Models.Empresa", "empresa")
                        .WithMany("ordemCompras")
                        .HasForeignKey("id_empresa");

                    b.HasOne("OffshoreTrack.Models.FormaPagamento", "formaPagamento")
                        .WithMany("ordemCompras")
                        .HasForeignKey("id_formaPagamento");

                    b.HasOne("OffshoreTrack.Models.Fornecedor", "fornecedor")
                        .WithMany("OrdensCompra1")
                        .HasForeignKey("id_fornecedor");

                    b.HasOne("OffshoreTrack.Models.Fornecedor", "fornecedor2")
                        .WithMany("OrdensCompra2")
                        .HasForeignKey("id_fornecedor2");

                    b.HasOne("OffshoreTrack.Models.Fornecedor", "fornecedor3")
                        .WithMany("OrdensCompra3")
                        .HasForeignKey("id_fornecedor3");

                    b.HasOne("OffshoreTrack.Models.Rateio", "rateio")
                        .WithMany("ordemCompras")
                        .HasForeignKey("id_rateio");

                    b.HasOne("OffshoreTrack.Models.Setor", "setor")
                        .WithMany("ordemCompras")
                        .HasForeignKey("id_setor");

                    b.HasOne("OffshoreTrack.Models.Status", "status")
                        .WithMany("ordemCompras")
                        .HasForeignKey("id_status");

                    b.HasOne("OffshoreTrack.Models.Usuario", "usuario")
                        .WithMany("ordemCompras")
                        .HasForeignKey("id_usuario");

                    b.Navigation("empresa");

                    b.Navigation("formaPagamento");

                    b.Navigation("fornecedor");

                    b.Navigation("fornecedor2");

                    b.Navigation("fornecedor3");

                    b.Navigation("rateio");

                    b.Navigation("setor");

                    b.Navigation("status");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("OffshoreTrack.Models.ParteSolta", b =>
                {
                    b.HasOne("OffshoreTrack.Models.Fornecedor", "fornecedor")
                        .WithMany("parteSoltas")
                        .HasForeignKey("fornecedorid_fornecedor");

                    b.HasOne("OffshoreTrack.Models.Certificacao", "certificacao")
                        .WithMany("parteSoltas")
                        .HasForeignKey("id_certificacao");

                    b.HasOne("OffshoreTrack.Models.Material", "material")
                        .WithMany("parteSoltas")
                        .HasForeignKey("id_material");

                    b.HasOne("OffshoreTrack.Models.Local", "local")
                        .WithMany("parteSoltas")
                        .HasForeignKey("localid_local");

                    b.HasOne("OffshoreTrack.Models.OrdemCompra", "oc")
                        .WithMany("parteSoltas")
                        .HasForeignKey("ocid_oc");

                    b.HasOne("OffshoreTrack.Models.Status", "status")
                        .WithMany("parteSoltas")
                        .HasForeignKey("statusid_status");

                    b.Navigation("certificacao");

                    b.Navigation("fornecedor");

                    b.Navigation("local");

                    b.Navigation("material");

                    b.Navigation("oc");

                    b.Navigation("status");
                });

            modelBuilder.Entity("OffshoreTrack.Models.Rateio", b =>
                {
                    b.HasOne("OffshoreTrack.Models.Setor", "setor1")
                        .WithMany("rateios1")
                        .HasForeignKey("id_setor1");

                    b.HasOne("OffshoreTrack.Models.Setor", "setor2")
                        .WithMany("rateios2")
                        .HasForeignKey("id_setor2");

                    b.Navigation("setor1");

                    b.Navigation("setor2");
                });

            modelBuilder.Entity("OffshoreTrack.Models.Usuario", b =>
                {
                    b.HasOne("OffshoreTrack.Models.Permissao", "Permissao")
                        .WithMany("usuarios")
                        .HasForeignKey("id_permissao");

                    b.Navigation("Permissao");
                });

            modelBuilder.Entity("OffshoreTrack.Models.Certificacao", b =>
                {
                    b.Navigation("materials");

                    b.Navigation("parteSoltas");
                });

            modelBuilder.Entity("OffshoreTrack.Models.Cliente", b =>
                {
                    b.Navigation("contratos");

                    b.Navigation("locals");

                    b.Navigation("materials");
                });

            modelBuilder.Entity("OffshoreTrack.Models.Criticidade", b =>
                {
                    b.Navigation("manutencaos");

                    b.Navigation("materials");
                });

            modelBuilder.Entity("OffshoreTrack.Models.Empresa", b =>
                {
                    b.Navigation("ordemCompras");
                });

            modelBuilder.Entity("OffshoreTrack.Models.FormaPagamento", b =>
                {
                    b.Navigation("ordemCompras");
                });

            modelBuilder.Entity("OffshoreTrack.Models.Fornecedor", b =>
                {
                    b.Navigation("OrdensCompra1");

                    b.Navigation("OrdensCompra2");

                    b.Navigation("OrdensCompra3");

                    b.Navigation("contratos");

                    b.Navigation("manutencaos");

                    b.Navigation("materials");

                    b.Navigation("parteSoltas");
                });

            modelBuilder.Entity("OffshoreTrack.Models.Local", b =>
                {
                    b.Navigation("materials");

                    b.Navigation("parteSoltas");
                });

            modelBuilder.Entity("OffshoreTrack.Models.Manutencao", b =>
                {
                    b.Navigation("materials");
                });

            modelBuilder.Entity("OffshoreTrack.Models.Material", b =>
                {
                    b.Navigation("atividadeLogs");

                    b.Navigation("certificacaos");

                    b.Navigation("manutencaos");

                    b.Navigation("parteSoltas");
                });

            modelBuilder.Entity("OffshoreTrack.Models.OrdemCompra", b =>
                {
                    b.Navigation("materials");

                    b.Navigation("parteSoltas");
                });

            modelBuilder.Entity("OffshoreTrack.Models.ParteSolta", b =>
                {
                    b.Navigation("atividadeLogsPS");

                    b.Navigation("materials");
                });

            modelBuilder.Entity("OffshoreTrack.Models.Permissao", b =>
                {
                    b.Navigation("usuarios");
                });

            modelBuilder.Entity("OffshoreTrack.Models.Rateio", b =>
                {
                    b.Navigation("ordemCompras");
                });

            modelBuilder.Entity("OffshoreTrack.Models.Setor", b =>
                {
                    b.Navigation("contratos");

                    b.Navigation("manutencaos");

                    b.Navigation("materials");

                    b.Navigation("ordemCompras");

                    b.Navigation("rateios1");

                    b.Navigation("rateios2");
                });

            modelBuilder.Entity("OffshoreTrack.Models.Status", b =>
                {
                    b.Navigation("contratos");

                    b.Navigation("manutencaos");

                    b.Navigation("materials");

                    b.Navigation("ordemCompras");

                    b.Navigation("parteSoltas");
                });

            modelBuilder.Entity("OffshoreTrack.Models.Tipo", b =>
                {
                    b.Navigation("manutencaos");

                    b.Navigation("materials");
                });

            modelBuilder.Entity("OffshoreTrack.Models.Usuario", b =>
                {
                    b.Navigation("atividadeLogs");

                    b.Navigation("materials");

                    b.Navigation("ordemCompras");
                });
#pragma warning restore 612, 618
        }
    }
}
